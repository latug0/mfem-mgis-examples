@DSL ImplicitFiniteStrain;
@Behaviour MonoCristal_UO2;
@Author Luc Portelette/Thomas Helfer/Etienne Castelier;
@Description {
  "Loi de plasticité cristalline UO2"
  "glissement devier/combiné (GD/C ou GD-C)"
}

@Algorithm NewtonRaphson;
@Epsilon 1.e-12;
@Theta 1.;
@IterMax 100;

@Brick FiniteStrainSingleCrystal{shifted_elastic_deformation_gradient:true};
@RequireStiffnessTensor;

// Systèmes de glissement de l'UO2
@CrystalStructure FCC;
@SlidingSystems {<0,1,1>{1,0,0},<0,1,1>{0,1,-1},<0,1,1>{1,1,-1}};

@LocalVariable real tau0[24];
@LocalVariable real gp0[24];

@InitLocalVariables {
  constexpr real kb = 1.38064852E-23;      // COnstante de Boltzman en J/K
  constexpr real nuD = 4.9356532213000e13; // Fréquence de Debye
  constexpr real a0 = 5.47e-10;            // Paramètre de maille en m
  constexpr auto rhom = 1.0e12;
  const real b = a0 * Cste<real>::isqrt2; // Norme du vecteur de Burgers en m
  const auto T_ = T + theta * dT;
  /****initialisation des paramètres de chaque mode****/
  for (unsigned short s = 0; s != 24; ++s) {
    auto DH0 = real{};
    if (s < 6) { /**** Système 1 *******/
      // Moyenne 100 interessante
      tau0[s] = 1.179e6;
      DH0 = 4.989 * 1.602e-19;
    } else if ((s >= 6) && (s < 12)) { /**** Système 2 *******/
      tau0[s] = 4.750e6;
      DH0 = 5.246 * 1.602e-19;
    } else { /**** Système 3 *******/
      tau0[s] = 9.215e6;
      DH0 = 12.13 * 1.602e-19;
    }
    gp0[s] = rhom * nuD * b * b * exp(-DH0 / (kb * T_));
  }
}

@Integrator {
  for (unsigned short s = 0; s != 24; ++s) {
    const auto tau = ss.mu[s] | M ;
    const auto sgn_s = tau >= 0 ? 1 : -1;
    const auto e = exp(tau / tau0[s]);
    const auto ch = (e + 1 / e) / 2;
    const auto sh = (e - 1 / e) / 2;
    const auto vs = gp0[s] * (ch - 1);
    const auto dvs_dtau = gp0[s] * sh / tau0[s];
    fg[s] -= dt * sgn_s * vs;
    dfg_ddeel(s) = -dt * sgn_s * dvs_dtau * (ss.mu[s] | dM_ddeel);
  }
}
